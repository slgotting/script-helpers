#!/usr/bin/env python3
import argparse
from argparse import RawTextHelpFormatter
from logger_slg import init_logger
from pprint import pformat
from slg_script_helpers.helpers import strip_sensitive_arguments, \
    guarantee_requirements_met, build_true_configuration

# this section is here because when we pass in a config file we also want to include those variables as potential arguments
# and required=True in the argparse arguments would not allow that to happen.
# So from now on I'm using these two sections to verify arguments are up to standard
REQUIRED_ARGUMENTS = []
DYNAMIC_DEFAULTS = { # If an argument is defaulted to a derivative of a previous required argument, we can set a lambda of said required argument
    'config_filepath': lambda username: f'/home/{username}/.config/slg/time_log.yml', # in this case, username is seen as the only required argument that was previously passed
}
SENSITIVE_ARGUMENTS = [] # place any passwords or other sensitive arguments in here to not expose them in configuration printing
SPECIAL_REQUIREMENTS = { # variable must return a truthy value for these lambda functions in order to proceed with running the script; follow the example requirements precedence for setting new requirements
    'config_filepath': [
        {
            'name': 'Filepath is an absolute filepath',
            'requirement': lambda value: value.startswith('/')
        },
    ]
}

def get_arguments():
    parser = argparse.ArgumentParser(description='''
    Description here
''',
    formatter_class=RawTextHelpFormatter)
    bools = parser.add_argument_group()
    ' args to be inserted here '
    return parser.parse_args()


''' helper functions to be inserted here '''

if __name__ == '__main__':
    args = get_arguments()
    try:
        logger = init_logger(
            name=__name__,
            log_path=f'/var/log/slg/{__file__.split("/")[-1]}.log'
        )
        if 'config_filepath' in args:
            config = build_true_configuration(args, DYNAMIC_DEFAULTS, logger, args.config_filepath)
            guarantee_requirements_met(config, logger, REQUIRED_ARGUMENTS, SPECIAL_REQUIREMENTS)
            sensitive_stripped_config = strip_sensitive_arguments(config, SENSITIVE_ARGUMENTS)
            logger.info(f'\nUsing configuration:\n\n{pformat(sensitive_stripped_config)}')

        ' script code to be inserted here '
    except:
        logger.exception('An error occurred')
